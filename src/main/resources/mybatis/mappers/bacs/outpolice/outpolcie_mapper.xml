<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zhixin.zhfz.bacs.dao.outpolice.OutPoliceMapper">

    <resultMap id="userResultMap" type="com.zhixin.zhfz.common.entity.UserEntity">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="login_name" property="loginName" jdbcType="VARCHAR"/>
        <result column="real_name" property="realName" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="job_title" property="jobTitle" jdbcType="VARCHAR"/>
        <result column="mobile" property="mobile" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="certificate_type_id" property="certificateTypeId"
                jdbcType="INTEGER"/>
        <result column="certificate_no" property="certificateNo"
                jdbcType="VARCHAR"/>
        <result column="sex" property="sex" jdbcType="INTEGER"/>
        <result column="is_active" property="isActive" jdbcType="INTEGER"/>
        <result column="description" property="description" jdbcType="VARCHAR"/>
        <result column="identity" property="identity" jdbcType="VARCHAR"/>
        <result column="created_time" property="createdTime" jdbcType="TIMESTAMP"/>
        <result column="updated_time" property="updatedTime" jdbcType="TIMESTAMP"/>
        <result column="certificate_name" property="certificateName"
                jdbcType="VARCHAR"/>
        <result column="organization_name" property="organizationName"
                jdbcType="VARCHAR"/>
        <result column="organization_type" property="organizationType"
                jdbcType="VARCHAR"/>
        <result column="organization_id" property="organizationId"
                jdbcType="VARCHAR"/>
        <result column="role_id" property="roleId" jdbcType="VARCHAR"/>
        <result column="type" property="type" jdbcType="INTEGER"/>
    </resultMap>

    <sql id="user_Column_List">
		id, login_name, real_name, password, mobile,
		certificate_type_id, certificate_no, sex, is_active, description, created_time,
		updated_time, organization_id, role_id
	</sql>


    <!-- 根据部门id获取所有用户信息 -->
    <select id="getUsersByOrgId" resultMap="userResultMap"
            parameterType="java.lang.Long">
        select
        <include refid="user_Column_List"/>
        from xt_user
        where organization_id = #{organizationId}
    </select>
    <!-- 根据获取用户信息（包含单位信息、证件信息） -->
    <select id="getOutpoliceInfo" resultMap="userResultMap"
            parameterType="java.util.Map">
        SELECT
        u.*, org.`name` organization_name,
        xc.code_value certificate_name,
        org.id AS organizationId
        FROM
        xt_user u

        LEFT JOIN xt_role r ON u.role_id = r.id
        LEFT JOIN xt_organization org ON org.id = u.organization_id
        LEFT JOIN xt_code xc ON xc.code_key= u.certificate_type_id
        WHERE
        org.id IN (SELECT org.id FROM xt_organization org WHERE org.parent_id = #{parentId})

        <if test="organizationId!=null and organizationId!=''">
            AND org.id =#{organizationId}
        </if>
        <if test="real_name != null and real_name != ''">
            and u.real_name like '%${real_name}%'
        </if>
        <if test="certificate_no != null and certificate_no != ''">
            and u.certificate_no like '%${certificate_no}%'
        </if>
        <if test="dataAuth!=null and dataAuth!=''">
            and ${dataAuth}
        </if>

        GROUP BY u.id
        order by created_time desc
        limit ${pageStart},${rows}
    </select>

    <!-- 根据获取用户信息（包含单位信息、证件信息）大小 -->
    <select id="count" resultType="java.lang.Integer" parameterType="java.util.Map">
        SELECT
        count(DISTINCT(u.id)) count
        FROM
        xt_user u

        LEFT JOIN xt_role r ON u.role_id = r.id
        LEFT JOIN xt_organization org ON org.id = u.organization_id
        LEFT JOIN xt_code xc ON xc.code_key= u.certificate_type_id
        WHERE
        org.id IN (SELECT org.id FROM xt_organization org WHERE org.parent_id = #{parentId})

        <if test="organizationId!=null and organizationId!=''">
            AND org.id =#{organizationId}
        </if>
        <if test="real_name != null and real_name != ''">
            and u.real_name like '%${real_name}%'
        </if>
        <if test="certificate_no != null and certificate_no != ''">
            and u.certificate_no like '%${certificate_no}%'
        </if>
        <if test="dataAuth!=null and dataAuth!=''">
            and ${dataAuth}
        </if>


    </select>

    <!-- 插入用户 信息 -->
    <insert id="insertUser" parameterType="com.zhixin.zhfz.common.entity.UserEntity"
            useGeneratedKeys="true" keyProperty="id">
		insert into xt_user (login_name, real_name,
		job_title, password, mobile,
		email,
		certificate_type_id, certificate_no, sex,
		is_active, description,identity, created_time,type,organization_id,role_id,op_Pid,op_User_Id)
		values (#{loginName,jdbcType=VARCHAR}, #{realName,jdbcType=VARCHAR},
		#{jobTitle,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
		#{mobile,jdbcType=VARCHAR},
		#{email,jdbcType=VARCHAR},
		#{certificateTypeId,jdbcType=INTEGER}, #{certificateNo,jdbcType=VARCHAR}, #{sex,jdbcType=INTEGER},
		#{isActive,jdbcType=INTEGER},
		#{description,jdbcType=VARCHAR},#{identity,jdbcType=VARCHAR},now(),
		#{type,jdbcType=INTEGER}, #{organizationId,jdbcType=INTEGER},
		#{roleId,jdbcType=INTEGER},
		#{op_Pid,jdbcType=VARCHAR},
		#{op_User_Id,jdbcType=INTEGER} )
	</insert>


    <!-- 更新用户信息 -->
    <update id="updateUserByID" parameterType="com.zhixin.zhfz.common.entity.UserEntity">
		update xt_user
		set login_name = #{loginName,jdbcType=VARCHAR},
		real_name = #{realName,jdbcType=VARCHAR},
		job_title = #{jobTitle,jdbcType=VARCHAR},
		password = #{password,jdbcType=VARCHAR},
		mobile = #{mobile,jdbcType=VARCHAR},
		email = #{email,jdbcType=VARCHAR},
		certificate_type_id = #{certificateTypeId,jdbcType=INTEGER},
		certificate_no = #{certificateNo,jdbcType=VARCHAR},
		sex = #{sex,jdbcType=INTEGER},
		is_active = #{isActive,jdbcType=INTEGER},
		description = #{description,jdbcType=VARCHAR},
		identity = #{identity,jdbcType=VARCHAR},
		type = #{type,jdbcType=INTEGER},
		organization_id = #{organizationId,jdbcType=INTEGER},
		role_id = #{roleId,jdbcType=INTEGER},
		updated_time = now()
		where id = #{id,jdbcType=INTEGER}
	</update>
    <!-- 更新用户信息 -->
    <update id="updateUserRoles" parameterType="com.zhixin.zhfz.common.entity.UserEntity">
		update xt_user
		set
		role_id = #{roleId,jdbcType=INTEGER},
		updated_time = now()
		where id = #{id,jdbcType=INTEGER}
	</update>


</mapper>